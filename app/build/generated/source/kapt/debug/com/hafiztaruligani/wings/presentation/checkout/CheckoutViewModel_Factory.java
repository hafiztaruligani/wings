// Generated by Dagger (https://dagger.dev).
package com.hafiztaruligani.wings.presentation.checkout;

import com.hafiztaruligani.wings.domain.usecase.Checkout;
import com.hafiztaruligani.wings.domain.usecase.UpdateQuantity;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CheckoutViewModel_Factory implements Factory<CheckoutViewModel> {
  private final Provider<Checkout> checkoutProvider;

  private final Provider<UpdateQuantity> updateQuantityProvider;

  public CheckoutViewModel_Factory(Provider<Checkout> checkoutProvider,
      Provider<UpdateQuantity> updateQuantityProvider) {
    this.checkoutProvider = checkoutProvider;
    this.updateQuantityProvider = updateQuantityProvider;
  }

  @Override
  public CheckoutViewModel get() {
    return newInstance(checkoutProvider.get(), updateQuantityProvider.get());
  }

  public static CheckoutViewModel_Factory create(Provider<Checkout> checkoutProvider,
      Provider<UpdateQuantity> updateQuantityProvider) {
    return new CheckoutViewModel_Factory(checkoutProvider, updateQuantityProvider);
  }

  public static CheckoutViewModel newInstance(Checkout checkout, UpdateQuantity updateQuantity) {
    return new CheckoutViewModel(checkout, updateQuantity);
  }
}
